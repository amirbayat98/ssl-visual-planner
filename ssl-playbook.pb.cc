// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl-playbook.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl-playbook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AgentInitPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentInitPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Target_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Positions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Positions_reflection_ = NULL;
const ::google::protobuf::Descriptor* Agents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Agents_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallInitPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallInitPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tags_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plans_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanBook_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_2dplaybook_2eproto() {
  protobuf_AddDesc_ssl_2dplaybook_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl-playbook.proto");
  GOOGLE_CHECK(file != NULL);
  AgentInitPos_descriptor_ = file->message_type(0);
  static const int AgentInitPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInitPos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInitPos, y_),
  };
  AgentInitPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentInitPos_descriptor_,
      AgentInitPos::default_instance_,
      AgentInitPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInitPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInitPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentInitPos));
  Target_descriptor_ = file->message_type(1);
  static const int Target_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, index_),
  };
  Target_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Target_descriptor_,
      Target::default_instance_,
      Target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Target));
  Skill_descriptor_ = file->message_type(2);
  static const int Skill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, primary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, secondry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, target_),
  };
  Skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_descriptor_,
      Skill::default_instance_,
      Skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill));
  Positions_descriptor_ = file->message_type(3);
  static const int Positions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Positions, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Positions, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Positions, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Positions, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Positions, tolerance_),
  };
  Positions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Positions_descriptor_,
      Positions::default_instance_,
      Positions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Positions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Positions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Positions));
  Agents_descriptor_ = file->message_type(4);
  static const int Agents_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agents, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agents, p_),
  };
  Agents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Agents_descriptor_,
      Agents::default_instance_,
      Agents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Agents));
  BallInitPos_descriptor_ = file->message_type(5);
  static const int BallInitPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInitPos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInitPos, y_),
  };
  BallInitPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallInitPos_descriptor_,
      BallInitPos::default_instance_,
      BallInitPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInitPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInitPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallInitPos));
  Tags_descriptor_ = file->message_type(6);
  static const int Tags_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tags, s_),
  };
  Tags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tags_descriptor_,
      Tags::default_instance_,
      Tags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tags));
  Plans_descriptor_ = file->message_type(7);
  static const int Plans_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, agentinitpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, agents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, bip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, chance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, lastdist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, planmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, tags_),
  };
  Plans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plans_descriptor_,
      Plans::default_instance_,
      Plans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plans));
  PlanBook_descriptor_ = file->message_type(8);
  static const int PlanBook_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanBook, plans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanBook, apiversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanBook, id_),
  };
  PlanBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanBook_descriptor_,
      PlanBook::default_instance_,
      PlanBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanBook));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_2dplaybook_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentInitPos_descriptor_, &AgentInitPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Target_descriptor_, &Target::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_descriptor_, &Skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Positions_descriptor_, &Positions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Agents_descriptor_, &Agents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallInitPos_descriptor_, &BallInitPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tags_descriptor_, &Tags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plans_descriptor_, &Plans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanBook_descriptor_, &PlanBook::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_2dplaybook_2eproto() {
  delete AgentInitPos::default_instance_;
  delete AgentInitPos_reflection_;
  delete Target::default_instance_;
  delete Target_reflection_;
  delete Skill::default_instance_;
  delete Skill_reflection_;
  delete Positions::default_instance_;
  delete Positions_reflection_;
  delete Agents::default_instance_;
  delete Agents_reflection_;
  delete BallInitPos::default_instance_;
  delete BallInitPos_reflection_;
  delete Tags::default_instance_;
  delete Tags_reflection_;
  delete Plans::default_instance_;
  delete Plans_reflection_;
  delete PlanBook::default_instance_;
  delete PlanBook_reflection_;
}

void protobuf_AddDesc_ssl_2dplaybook_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ssl-playbook.proto\"$\n\014AgentInitPos\022\t\n\001"
    "x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\"&\n\006Target\022\r\n\005agent\030\001 "
    "\002(\003\022\r\n\005index\030\002 \002(\003\"_\n\005Skill\022\014\n\004flag\030\001 \002("
    "\010\022\014\n\004name\030\002 \002(\t\022\017\n\007primary\030\003 \002(\003\022\020\n\010seco"
    "ndry\030\004 \002(\003\022\027\n\006target\030\005 \001(\0132\007.Target\"c\n\tP"
    "ositions\022\r\n\005angle\030\001 \002(\002\022\r\n\005pos_x\030\002 \002(\001\022\r"
    "\n\005pos_y\030\003 \002(\001\022\026\n\006skills\030\004 \003(\0132\006.Skill\022\021\n"
    "\ttolerance\030\006 \002(\003\"+\n\006Agents\022\n\n\002id\030\001 \002(\004\022\025"
    "\n\001p\030\002 \003(\0132\n.Positions\"#\n\013BallInitPos\022\t\n\001"
    "x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\"\021\n\004Tags\022\t\n\001s\030\001 \002(\t\"\251\001"
    "\n\005Plans\022#\n\014agentInitPos\030\001 \003(\0132\r.AgentIni"
    "tPos\022\027\n\006agents\030\002 \003(\0132\007.Agents\022\031\n\003bip\030\003 \002"
    "(\0132\014.BallInitPos\022\016\n\006chance\030\004 \002(\002\022\020\n\010last"
    "dist\030\005 \002(\002\022\020\n\010planMode\030\006 \002(\t\022\023\n\004tags\030\007 \003"
    "(\0132\005.Tags\"A\n\010PlanBook\022\025\n\005plans\030\001 \003(\0132\006.P"
    "lans\022\022\n\napiversion\030\002 \002(\002\022\n\n\002id\030\003 \002(\003", 636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl-playbook.proto", &protobuf_RegisterTypes);
  AgentInitPos::default_instance_ = new AgentInitPos();
  Target::default_instance_ = new Target();
  Skill::default_instance_ = new Skill();
  Positions::default_instance_ = new Positions();
  Agents::default_instance_ = new Agents();
  BallInitPos::default_instance_ = new BallInitPos();
  Tags::default_instance_ = new Tags();
  Plans::default_instance_ = new Plans();
  PlanBook::default_instance_ = new PlanBook();
  AgentInitPos::default_instance_->InitAsDefaultInstance();
  Target::default_instance_->InitAsDefaultInstance();
  Skill::default_instance_->InitAsDefaultInstance();
  Positions::default_instance_->InitAsDefaultInstance();
  Agents::default_instance_->InitAsDefaultInstance();
  BallInitPos::default_instance_->InitAsDefaultInstance();
  Tags::default_instance_->InitAsDefaultInstance();
  Plans::default_instance_->InitAsDefaultInstance();
  PlanBook::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_2dplaybook_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_2dplaybook_2eproto {
  StaticDescriptorInitializer_ssl_2dplaybook_2eproto() {
    protobuf_AddDesc_ssl_2dplaybook_2eproto();
  }
} static_descriptor_initializer_ssl_2dplaybook_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AgentInitPos::kXFieldNumber;
const int AgentInitPos::kYFieldNumber;
#endif  // !_MSC_VER

AgentInitPos::AgentInitPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentInitPos::InitAsDefaultInstance() {
}

AgentInitPos::AgentInitPos(const AgentInitPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentInitPos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentInitPos::~AgentInitPos() {
  SharedDtor();
}

void AgentInitPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgentInitPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentInitPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentInitPos_descriptor_;
}

const AgentInitPos& AgentInitPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_2dplaybook_2eproto();
  return *default_instance_;
}

AgentInitPos* AgentInitPos::default_instance_ = NULL;

AgentInitPos* AgentInitPos::New() const {
  return new AgentInitPos;
}

void AgentInitPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentInitPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentInitPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentInitPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentInitPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentInitPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentInitPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentInitPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentInitPos::MergeFrom(const AgentInitPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentInitPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentInitPos::CopyFrom(const AgentInitPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInitPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AgentInitPos::Swap(AgentInitPos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentInitPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentInitPos_descriptor_;
  metadata.reflection = AgentInitPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Target::kAgentFieldNumber;
const int Target::kIndexFieldNumber;
#endif  // !_MSC_VER

Target::Target()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Target::InitAsDefaultInstance() {
}

Target::Target(const Target& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Target::SharedCtor() {
  _cached_size_ = 0;
  agent_ = GOOGLE_LONGLONG(0);
  index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Target::~Target() {
  SharedDtor();
}

void Target::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Target_descriptor_;
}

const Target& Target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_2dplaybook_2eproto();
  return *default_instance_;
}

Target* Target::default_instance_ = NULL;

Target* Target::New() const {
  return new Target;
}

void Target::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agent_ = GOOGLE_LONGLONG(0);
    index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 agent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &agent_)));
          set_has_agent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->agent(), output);
  }

  // required int64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Target::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 agent = 1;
  if (has_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->agent(), target);
  }

  // required int64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Target::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 agent = 1;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->agent());
    }

    // required int64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Target::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Target* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Target*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Target::MergeFrom(const Target& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent()) {
      set_agent(from.agent());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Target::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Target::CopyFrom(const Target& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Target::Swap(Target* other) {
  if (other != this) {
    std::swap(agent_, other->agent_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Target_descriptor_;
  metadata.reflection = Target_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill::kFlagFieldNumber;
const int Skill::kNameFieldNumber;
const int Skill::kPrimaryFieldNumber;
const int Skill::kSecondryFieldNumber;
const int Skill::kTargetFieldNumber;
#endif  // !_MSC_VER

Skill::Skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill::InitAsDefaultInstance() {
  target_ = const_cast< ::Target*>(&::Target::default_instance());
}

Skill::Skill(const Skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  primary_ = GOOGLE_LONGLONG(0);
  secondry_ = GOOGLE_LONGLONG(0);
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill::~Skill() {
  SharedDtor();
}

void Skill::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete target_;
  }
}

void Skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_descriptor_;
}

const Skill& Skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_2dplaybook_2eproto();
  return *default_instance_;
}

Skill* Skill::default_instance_ = NULL;

Skill* Skill::New() const {
  return new Skill;
}

void Skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    primary_ = GOOGLE_LONGLONG(0);
    secondry_ = GOOGLE_LONGLONG(0);
    if (has_target()) {
      if (target_ != NULL) target_->::Target::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_primary;
        break;
      }

      // required int64 primary = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_primary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &primary_)));
          set_has_primary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_secondry;
        break;
      }

      // required int64 secondry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secondry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &secondry_)));
          set_has_secondry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_target;
        break;
      }

      // optional .Target target = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int64 primary = 3;
  if (has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->primary(), output);
  }

  // required int64 secondry = 4;
  if (has_secondry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->secondry(), output);
  }

  // optional .Target target = 5;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int64 primary = 3;
  if (has_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->primary(), target);
  }

  // required int64 secondry = 4;
  if (has_secondry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->secondry(), target);
  }

  // optional .Target target = 5;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int64 primary = 3;
    if (has_primary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->primary());
    }

    // required int64 secondry = 4;
    if (has_secondry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->secondry());
    }

    // optional .Target target = 5;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill::MergeFrom(const Skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_primary()) {
      set_primary(from.primary());
    }
    if (from.has_secondry()) {
      set_secondry(from.secondry());
    }
    if (from.has_target()) {
      mutable_target()->::Target::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill::CopyFrom(const Skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void Skill::Swap(Skill* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(name_, other->name_);
    std::swap(primary_, other->primary_);
    std::swap(secondry_, other->secondry_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_descriptor_;
  metadata.reflection = Skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Positions::kAngleFieldNumber;
const int Positions::kPosXFieldNumber;
const int Positions::kPosYFieldNumber;
const int Positions::kSkillsFieldNumber;
const int Positions::kToleranceFieldNumber;
#endif  // !_MSC_VER

Positions::Positions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Positions::InitAsDefaultInstance() {
}

Positions::Positions(const Positions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Positions::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  tolerance_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Positions::~Positions() {
  SharedDtor();
}

void Positions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Positions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Positions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Positions_descriptor_;
}

const Positions& Positions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_2dplaybook_2eproto();
  return *default_instance_;
}

Positions* Positions::default_instance_ = NULL;

Positions* Positions::New() const {
  return new Positions;
}

void Positions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
    pos_x_ = 0;
    pos_y_ = 0;
    tolerance_ = GOOGLE_LONGLONG(0);
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Positions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_pos_x;
        break;
      }

      // required double pos_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_pos_y;
        break;
      }

      // required double pos_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skills;
        break;
      }

      // repeated .Skill skills = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skills;
        if (input->ExpectTag(48)) goto parse_tolerance;
        break;
      }

      // required int64 tolerance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tolerance_)));
          set_has_tolerance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Positions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle(), output);
  }

  // required double pos_x = 2;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pos_x(), output);
  }

  // required double pos_y = 3;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pos_y(), output);
  }

  // repeated .Skill skills = 4;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skills(i), output);
  }

  // required int64 tolerance = 6;
  if (has_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tolerance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Positions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle(), target);
  }

  // required double pos_x = 2;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pos_x(), target);
  }

  // required double pos_y = 3;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pos_y(), target);
  }

  // repeated .Skill skills = 4;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skills(i), target);
  }

  // required int64 tolerance = 6;
  if (has_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tolerance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Positions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float angle = 1;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required double pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 + 8;
    }

    // required double pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 + 8;
    }

    // required int64 tolerance = 6;
    if (has_tolerance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tolerance());
    }

  }
  // repeated .Skill skills = 4;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Positions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Positions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Positions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Positions::MergeFrom(const Positions& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_tolerance()) {
      set_tolerance(from.tolerance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Positions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Positions::CopyFrom(const Positions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Positions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void Positions::Swap(Positions* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    skills_.Swap(&other->skills_);
    std::swap(tolerance_, other->tolerance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Positions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Positions_descriptor_;
  metadata.reflection = Positions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Agents::kIdFieldNumber;
const int Agents::kPFieldNumber;
#endif  // !_MSC_VER

Agents::Agents()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Agents::InitAsDefaultInstance() {
}

Agents::Agents(const Agents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Agents::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Agents::~Agents() {
  SharedDtor();
}

void Agents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Agents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Agents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Agents_descriptor_;
}

const Agents& Agents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_2dplaybook_2eproto();
  return *default_instance_;
}

Agents* Agents::default_instance_ = NULL;

Agents* Agents::New() const {
  return new Agents;
}

void Agents::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  p_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Agents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_p;
        break;
      }

      // repeated .Positions p = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_p()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_p;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Agents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .Positions p = 2;
  for (int i = 0; i < this->p_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->p(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Agents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .Positions p = 2;
  for (int i = 0; i < this->p_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->p(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Agents::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .Positions p = 2;
  total_size += 1 * this->p_size();
  for (int i = 0; i < this->p_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->p(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Agents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Agents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Agents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Agents::MergeFrom(const Agents& from) {
  GOOGLE_CHECK_NE(&from, this);
  p_.MergeFrom(from.p_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Agents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agents::CopyFrom(const Agents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agents::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < p_size(); i++) {
    if (!this->p(i).IsInitialized()) return false;
  }
  return true;
}

void Agents::Swap(Agents* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    p_.Swap(&other->p_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Agents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Agents_descriptor_;
  metadata.reflection = Agents_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallInitPos::kXFieldNumber;
const int BallInitPos::kYFieldNumber;
#endif  // !_MSC_VER

BallInitPos::BallInitPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallInitPos::InitAsDefaultInstance() {
}

BallInitPos::BallInitPos(const BallInitPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallInitPos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallInitPos::~BallInitPos() {
  SharedDtor();
}

void BallInitPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallInitPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallInitPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallInitPos_descriptor_;
}

const BallInitPos& BallInitPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_2dplaybook_2eproto();
  return *default_instance_;
}

BallInitPos* BallInitPos::default_instance_ = NULL;

BallInitPos* BallInitPos::New() const {
  return new BallInitPos;
}

void BallInitPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallInitPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallInitPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallInitPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallInitPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallInitPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallInitPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallInitPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallInitPos::MergeFrom(const BallInitPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallInitPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallInitPos::CopyFrom(const BallInitPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallInitPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BallInitPos::Swap(BallInitPos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallInitPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallInitPos_descriptor_;
  metadata.reflection = BallInitPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tags::kSFieldNumber;
#endif  // !_MSC_VER

Tags::Tags()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tags::InitAsDefaultInstance() {
}

Tags::Tags(const Tags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tags::SharedCtor() {
  _cached_size_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tags::~Tags() {
  SharedDtor();
}

void Tags::SharedDtor() {
  if (s_ != &::google::protobuf::internal::kEmptyString) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void Tags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tags_descriptor_;
}

const Tags& Tags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_2dplaybook_2eproto();
  return *default_instance_;
}

Tags* Tags::default_instance_ = NULL;

Tags* Tags::New() const {
  return new Tags;
}

void Tags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::kEmptyString) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string s = 1;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tags::MergeFrom(const Tags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tags::CopyFrom(const Tags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tags::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Tags::Swap(Tags* other) {
  if (other != this) {
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tags_descriptor_;
  metadata.reflection = Tags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Plans::kAgentInitPosFieldNumber;
const int Plans::kAgentsFieldNumber;
const int Plans::kBipFieldNumber;
const int Plans::kChanceFieldNumber;
const int Plans::kLastdistFieldNumber;
const int Plans::kPlanModeFieldNumber;
const int Plans::kTagsFieldNumber;
#endif  // !_MSC_VER

Plans::Plans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Plans::InitAsDefaultInstance() {
  bip_ = const_cast< ::BallInitPos*>(&::BallInitPos::default_instance());
}

Plans::Plans(const Plans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Plans::SharedCtor() {
  _cached_size_ = 0;
  bip_ = NULL;
  chance_ = 0;
  lastdist_ = 0;
  planmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plans::~Plans() {
  SharedDtor();
}

void Plans::SharedDtor() {
  if (planmode_ != &::google::protobuf::internal::kEmptyString) {
    delete planmode_;
  }
  if (this != default_instance_) {
    delete bip_;
  }
}

void Plans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plans_descriptor_;
}

const Plans& Plans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_2dplaybook_2eproto();
  return *default_instance_;
}

Plans* Plans::default_instance_ = NULL;

Plans* Plans::New() const {
  return new Plans;
}

void Plans::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_bip()) {
      if (bip_ != NULL) bip_->::BallInitPos::Clear();
    }
    chance_ = 0;
    lastdist_ = 0;
    if (has_planmode()) {
      if (planmode_ != &::google::protobuf::internal::kEmptyString) {
        planmode_->clear();
      }
    }
  }
  agentinitpos_.Clear();
  agents_.Clear();
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AgentInitPos agentInitPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentInitPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agentinitpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_agentInitPos;
        if (input->ExpectTag(18)) goto parse_agents;
        break;
      }

      // repeated .Agents agents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_agents;
        if (input->ExpectTag(26)) goto parse_bip;
        break;
      }

      // required .BallInitPos bip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_chance;
        break;
      }

      // required float chance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chance_)));
          set_has_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_lastdist;
        break;
      }

      // required float lastdist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastdist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastdist_)));
          set_has_lastdist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_planMode;
        break;
      }

      // required string planMode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planMode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planmode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->planmode().data(), this->planmode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tags;
        break;
      }

      // repeated .Tags tags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Plans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AgentInitPos agentInitPos = 1;
  for (int i = 0; i < this->agentinitpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agentinitpos(i), output);
  }

  // repeated .Agents agents = 2;
  for (int i = 0; i < this->agents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->agents(i), output);
  }

  // required .BallInitPos bip = 3;
  if (has_bip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bip(), output);
  }

  // required float chance = 4;
  if (has_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->chance(), output);
  }

  // required float lastdist = 5;
  if (has_lastdist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lastdist(), output);
  }

  // required string planMode = 6;
  if (has_planmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planmode().data(), this->planmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->planmode(), output);
  }

  // repeated .Tags tags = 7;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Plans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AgentInitPos agentInitPos = 1;
  for (int i = 0; i < this->agentinitpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agentinitpos(i), target);
  }

  // repeated .Agents agents = 2;
  for (int i = 0; i < this->agents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->agents(i), target);
  }

  // required .BallInitPos bip = 3;
  if (has_bip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bip(), target);
  }

  // required float chance = 4;
  if (has_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->chance(), target);
  }

  // required float lastdist = 5;
  if (has_lastdist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lastdist(), target);
  }

  // required string planMode = 6;
  if (has_planmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planmode().data(), this->planmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->planmode(), target);
  }

  // repeated .Tags tags = 7;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Plans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .BallInitPos bip = 3;
    if (has_bip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bip());
    }

    // required float chance = 4;
    if (has_chance()) {
      total_size += 1 + 4;
    }

    // required float lastdist = 5;
    if (has_lastdist()) {
      total_size += 1 + 4;
    }

    // required string planMode = 6;
    if (has_planmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planmode());
    }

  }
  // repeated .AgentInitPos agentInitPos = 1;
  total_size += 1 * this->agentinitpos_size();
  for (int i = 0; i < this->agentinitpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agentinitpos(i));
  }

  // repeated .Agents agents = 2;
  total_size += 1 * this->agents_size();
  for (int i = 0; i < this->agents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agents(i));
  }

  // repeated .Tags tags = 7;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plans::MergeFrom(const Plans& from) {
  GOOGLE_CHECK_NE(&from, this);
  agentinitpos_.MergeFrom(from.agentinitpos_);
  agents_.MergeFrom(from.agents_);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_bip()) {
      mutable_bip()->::BallInitPos::MergeFrom(from.bip());
    }
    if (from.has_chance()) {
      set_chance(from.chance());
    }
    if (from.has_lastdist()) {
      set_lastdist(from.lastdist());
    }
    if (from.has_planmode()) {
      set_planmode(from.planmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plans::CopyFrom(const Plans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plans::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;

  for (int i = 0; i < agentinitpos_size(); i++) {
    if (!this->agentinitpos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < agents_size(); i++) {
    if (!this->agents(i).IsInitialized()) return false;
  }
  if (has_bip()) {
    if (!this->bip().IsInitialized()) return false;
  }
  for (int i = 0; i < tags_size(); i++) {
    if (!this->tags(i).IsInitialized()) return false;
  }
  return true;
}

void Plans::Swap(Plans* other) {
  if (other != this) {
    agentinitpos_.Swap(&other->agentinitpos_);
    agents_.Swap(&other->agents_);
    std::swap(bip_, other->bip_);
    std::swap(chance_, other->chance_);
    std::swap(lastdist_, other->lastdist_);
    std::swap(planmode_, other->planmode_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plans_descriptor_;
  metadata.reflection = Plans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanBook::kPlansFieldNumber;
const int PlanBook::kApiversionFieldNumber;
const int PlanBook::kIdFieldNumber;
#endif  // !_MSC_VER

PlanBook::PlanBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanBook::InitAsDefaultInstance() {
}

PlanBook::PlanBook(const PlanBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanBook::SharedCtor() {
  _cached_size_ = 0;
  apiversion_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanBook::~PlanBook() {
  SharedDtor();
}

void PlanBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlanBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanBook_descriptor_;
}

const PlanBook& PlanBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_2dplaybook_2eproto();
  return *default_instance_;
}

PlanBook* PlanBook::default_instance_ = NULL;

PlanBook* PlanBook::New() const {
  return new PlanBook;
}

void PlanBook::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    apiversion_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  plans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Plans plans = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_plans;
        if (input->ExpectTag(21)) goto parse_apiversion;
        break;
      }

      // required float apiversion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_apiversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &apiversion_)));
          set_has_apiversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Plans plans = 1;
  for (int i = 0; i < this->plans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plans(i), output);
  }

  // required float apiversion = 2;
  if (has_apiversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->apiversion(), output);
  }

  // required int64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Plans plans = 1;
  for (int i = 0; i < this->plans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plans(i), target);
  }

  // required float apiversion = 2;
  if (has_apiversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->apiversion(), target);
  }

  // required int64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required float apiversion = 2;
    if (has_apiversion()) {
      total_size += 1 + 4;
    }

    // required int64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated .Plans plans = 1;
  total_size += 1 * this->plans_size();
  for (int i = 0; i < this->plans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanBook::MergeFrom(const PlanBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  plans_.MergeFrom(from.plans_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_apiversion()) {
      set_apiversion(from.apiversion());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanBook::CopyFrom(const PlanBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < plans_size(); i++) {
    if (!this->plans(i).IsInitialized()) return false;
  }
  return true;
}

void PlanBook::Swap(PlanBook* other) {
  if (other != this) {
    plans_.Swap(&other->plans_);
    std::swap(apiversion_, other->apiversion_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanBook_descriptor_;
  metadata.reflection = PlanBook_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
